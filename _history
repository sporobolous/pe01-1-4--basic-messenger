{"entries":[{"timestamp":1741016807382,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})\n\n// initialisation -> Yes icon \n \n// press A -> toggle between 5 messages\n// message 1 \n// basic.showLeds(`\n// // # . . . .\n// // . . . . .\n// // . . . . .\n// // . . . . .\n// // . . . . .\n// // `)\n\n// message 2 \n// basic.showLeds(`\n// // # . . . .\n// // # # . . .\n// // . . . . .\n// // . . . . .\n// // . . . . .\n// // `)\n\n// message 3 \n// basic.showLeds(`\n// // # . . . .\n// // # # . . .\n// // # # # . .\n// // . . . . .\n// // . . . . .\n// // `)\n\n// message 4 \n// basic.showLeds(`\n// // # . . . .\n// // # # . . .\n// // # # # . .\n// // # # # # .\n// // . . . . .\n// // `)\n\n"],[0,"\n"]],"start1":0,"start2":0,"length1":604,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":250,"start2":250,"length1":32,"length2":31}]}]},{"timestamp":1741017404026,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1)  // All Micro:bits in the same communication group\nlet selectedMessage = 0  // Tracks current message selection (1-5)\nlet lastReceivedMessage = 0  // Stores the last received message\nlet deviceID = control.deviceSerialNumber()  // Unique ID for each Micro:bit\n\n// Show \"Yes\" icon at startup\nbasic.showIcon(IconNames.Yes)\n\n// Press A to toggle message selection (1-5)\ninput.onButtonPressed(Button.A, function () {\n    selectedMessage++\n    if (selectedMessage > 5) {\n        selectedMessage = 1  // Loop back to message 1 after 5\n    }\n    showMessagePattern(selectedMessage)  // Display message LED pattern\n})\n\n// Press A+B to clear selection\ninput.onButtonPressed(Button.AB, function () {\n    selectedMessage = 0\n    basic.showIcon(IconNames.No)  // Indicate cleared selection\n})\n\n// Press B to send selected message\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMessage == 0) {\n        basic.showIcon(IconNames.Sad)  // Show sad icon if no message selected\n        basic.pause(3000)\n        basic.showIcon(IconNames.No)  // Return to \"No\" icon\n    } else {\n        radio.sendValue(\"msg\", selectedMessage)  // Send message with tag\n        radio.sendValue(\"id\", deviceID)  // Send device ID to prevent self-reception\n        basic.showIcon(IconNames.Happy)  // Indicate message sent\n        basic.pause(3000)\n        showMessagePattern(selectedMessage)  // Show last selected message\n    }\n})\n\n// Receive and process incoming messages\nradio.onReceivedValue(function (name, value) {\n    if (name == \"id\" && value == deviceID) {\n        return  // Ignore self-sent messages\n    }\n    if (name == \"msg\") {\n        lastReceivedMessage = value\n        showReceivedPattern()  // Show incoming message indicator\n        basic.pause(3000)\n        showMessagePattern(lastReceivedMessage)  // Show received message or \"No\" if none\n    }\n})\n\n// Function to display predefined LED patterns for messages\nfunction showMessagePattern(msg: number) {\n    if (msg == 1) {\n        basic.showLeds(`\n            # . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n        `)\n    } else if (msg == 2) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            . . . . .\n            . . . . .\n            . . . . .\n        `)\n    } else if (msg == 3) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            # # # . .\n            . . . . .\n            . . . . .\n        `)\n    } else if (msg == 4) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            # # # . .\n            # # # # .\n            . . . . .\n        `)\n    } else if (msg == 5) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            # # # . .\n            # # # # .\n            # # # # #\n        `)\n    } else {\n        basic.showIcon(IconNames.No)  // Default to \"No\" if message is invalid\n    }\n}\n\n// Function to show received message pattern\nfunction showReceivedPattern() {\n    basic.showLeds(`\n        # # # # #\n        # . . . #\n        # . # . #\n        # . . . #\n        # # # # #\n    `)\n}"],[1,"basic.forever(function () {\n\t\n})\n\n// initialisation -> Yes icon \n \n// press A -> toggle between 5 messages\n// message 1 \n// basic.showLeds(`\n// // # . . . .\n// // . . . . .\n// // . . . . .\n// // . . . . .\n// // . . . . .\n// // `)\n\n// message 2 \n// basic.showLeds(`\n// // # . . . .\n// // # # . . .\n// // . . . . .\n// // . . . . .\n// // . . . . .\n// // `)\n\n// message 3 \n// basic.showLeds(`\n// // # . . . .\n// // # # . . .\n// // # # # . .\n// // . . . . .\n// // . . . . .\n// // `)\n\n// message 4 \n// basic.showLeds(`\n// // # . . . .\n// // # # . . .\n// // # # # . .\n// // # # # # .\n// // . . . . .\n// // `)\n\n\n"]],"start1":0,"start2":0,"length1":3125,"length2":604}]}]},{"timestamp":1741017975000,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," // "],[-1,"Set group for communication\nbasic.pause(500)  // Allow time for radio set"],[1,"All Micro:bits in the same communication gro"],[0,"up\nl"]],"start1":18,"start2":18,"length1":81,"length2":52},{"diffs":[[0," Stores "],[1,"the "],[0,"last rec"]],"start1":167,"start2":167,"length1":16,"length2":20},{"diffs":[[0,"how "],[-1,"a tick icon to indic"],[1,"\"Yes\" icon "],[0,"at"],[-1,"e"],[0," s"],[-1,"uccessful initialization"],[1,"tartup"],[0,"\nbas"]],"start1":283,"start2":283,"length1":57,"length2":29},{"diffs":[[0," // "],[-1,"Reset"],[1,"Loop"],[0," bac"]],"start1":512,"start2":512,"length1":13,"length2":12},{"diffs":[[0,"essage 1"],[1," after 5"],[0,"\n    }\n "]],"start1":530,"start2":530,"length1":16,"length2":24},{"diffs":[[0,"Display "],[-1,"the selected message"],[1,"message LED pattern"],[0,"\n})\n\n// "]],"start1":597,"start2":597,"length1":36,"length2":35},{"diffs":[[0," // "],[-1,"Show \"No\" icon to i"],[1,"I"],[0,"ndic"]],"start1":765,"start2":765,"length1":27,"length2":9},{"diffs":[[0,"to send "],[-1,"the "],[0,"selected"]],"start1":811,"start2":811,"length1":20,"length2":16},{"diffs":[[0,"sad "],[-1,"face"],[1,"icon"],[0," if "]],"start1":961,"start2":961,"length1":12,"length2":12},{"diffs":[[0," // "],[-1,"Broadcast the selected message"],[1,"Send message with tag"],[0,"\n   "]],"start1":1141,"start2":1141,"length1":38,"length2":29},{"diffs":[[0,"end "],[-1,"sender's"],[1,"device"],[0," ID "]],"start1":1212,"start2":1212,"length1":16,"length2":14},{"diffs":[[0," // "],[-1,"Restore the"],[1,"Show"],[0," las"]],"start1":1388,"start2":1388,"length1":19,"length2":12},{"diffs":[[0,"ore "],[-1,"own"],[1,"self-sent"],[0," mes"]],"start1":1584,"start2":1584,"length1":11,"length2":17},{"diffs":[[0,"how "],[-1,"that a new message was received"],[1,"incoming message indicator"],[0,"\n   "]],"start1":1709,"start2":1709,"length1":39,"length2":34},{"diffs":[[0,"ge)  // "],[-1,"Display"],[1,"Show"],[0," receive"]],"start1":1810,"start2":1810,"length1":23,"length2":20},{"diffs":[[0,"ge or \"No\" i"],[-1,"c"],[1,"f n"],[0,"on"],[1,"e"],[0,"\n    }\n})\n\n/"]],"start1":1837,"start2":1837,"length1":27,"length2":30},{"diffs":[[0," // "],[-1,"Show \"No\" if invalid message"],[1,"Default to \"No\" if message is invalid"],[0,"\n   "]],"start1":2877,"start2":2877,"length1":36,"length2":45},{"diffs":[[0,"how "],[-1,"\"new message received\""],[1,"received message"],[0," pat"]],"start1":2944,"start2":2944,"length1":30,"length2":24}]}]},{"timestamp":1741018369085,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]}]},{"timestamp":1741062701621,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":245,"start2":245,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1741016807381,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"PE01-1-4 â€“ Basic Messenger\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1741062701621,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"radio.setGroup(1)  // Set group for communication\nbasic.pause(500)  // Allow time for radio setup\nlet selectedMessage = 0  // Tracks current message selection (1-5)\nlet lastReceivedMessage = 0  // Stores last received message\nlet deviceID = control.deviceSerialNumber()  // Unique ID for each Micro:bit\n\n// Show a tick icon to indicate successful initialization\nbasic.showIcon(IconNames.Yes)\n\n// Press A to toggle message selection (1-5)\ninput.onButtonPressed(Button.A, function () {\n    selectedMessage++\n    if (selectedMessage > 5) {\n        selectedMessage = 1  // Reset back to message 1\n    }\n    showMessagePattern(selectedMessage)  // Display the selected message\n})\n\n// Press A+B to clear selection\ninput.onButtonPressed(Button.AB, function () {\n    selectedMessage = 0\n    basic.showIcon(IconNames.No)  // Show \"No\" icon to indicate cleared selection\n})\n\n// Press B to send the selected message\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMessage == 0) {\n        basic.showIcon(IconNames.Sad)  // Show sad face if no message selected\n        basic.pause(3000)\n        basic.showIcon(IconNames.No)  // Return to \"No\" icon\n    } else {\n        radio.sendValue(\"msg\", selectedMessage)  // Broadcast the selected message\n        radio.sendValue(\"id\", deviceID)  // Send sender's ID to prevent self-reception\n        basic.showIcon(IconNames.Happy)  // Indicate message sent\n        basic.pause(3000)\n        showMessagePattern(selectedMessage)  // Restore the last selected message\n    }\n})\n\n// Receive and process incoming messages\nradio.onReceivedValue(function (name, value) {\n    if (name == \"id\" && value == deviceID) {\n        return  // Ignore own messages\n    }\n    if (name == \"msg\") {\n        lastReceivedMessage = value\n        showReceivedPattern()  // Show that a new message was received\n        basic.pause(3000)\n        showMessagePattern(lastReceivedMessage)  // Display received message or \"No\" icon\n    }\n})\n\n// Function to display predefined LED patterns for messages\nfunction showMessagePattern(msg: number) {\n    if (msg == 1) {\n        basic.showLeds(`\n            # . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n        `)\n    } else if (msg == 2) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            . . . . .\n            . . . . .\n            . . . . .\n        `)\n    } else if (msg == 3) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            # # # . .\n            . . . . .\n            . . . . .\n        `)\n    } else if (msg == 4) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            # # # . .\n            # # # # .\n            . . . . .\n        `)\n    } else if (msg == 5) {\n        basic.showLeds(`\n            # . . . .\n            # # . . .\n            # # # . .\n            # # # # .\n            # # # # #\n        `)\n    } else {\n        basic.showIcon(IconNames.No)  // Show \"No\" if invalid message\n    }\n}\n\n// Function to show \"new message received\" pattern\nfunction showReceivedPattern() {\n    basic.showLeds(`\n        # # # # #\n        # . . . #\n        # . # . #\n        # . . . #\n        # # # # #\n    `)\n}","README.md":"","pxt.json":"{\n    \"name\": \"PE01-1-4 â€“ Basic Messenger\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1741062701630}